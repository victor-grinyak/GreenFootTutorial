#BlueJ class context
comment0.target=Connection
comment0.text=\n\ A\ class\ consisting\ of\ methods\ for\ setting\ up\ network\ connections\ between\ scenarios.\n\ \n\ To\ use\ this\ class,\ simply\ instantiate\ it.\ There\ are\ 3\ possible\ constructors\ to\ choose\ from.\n\ The\ first\ constructor\ takes\ no\ parameters,\ you\ can\ use\ this\ to\ set\ up\ a\ default\ server\ connection\ \n\ which\ will\ listen\ for\ a\ client\ on\ the\ default\ port.\ The\ second\ option\ is\ to\ specify\ an\ IP\ address\n\ as\ a\ String,\ this\ will\ cause\ the\ connection\ to\ connect\ as\ a\ client\ on\ the\ default\ port\ to\ the\ \n\ specified\ IP\ address.\ Thirdly,\ you\ can\ select\ both\ the\ host\ and\ the\ port\ to\ connect\ to.\ In\ the\ last\n\ two\ cases,\ leaving\ the\ host\ parameter\ blank\ causes\ the\ connection\ to\ be\ set\ up\ as\ a\ server,\ so\ if\ \n\ you\ want\ a\ server\ connection\ on\ a\ specific\ port,\ simply\ call\ <code>new\ Connection("",\ port);</code>.\n\ <br>\n\ <br>\n\ Once\ the\ connection\ is\ initialised\ at\ both\ ends,\ you\ can\ then\ use\ the\ various\ send\ and\ receive\ methods\n\ such\ as\ sendInts\ and\ receiveInts\ to\ send\ and\ receive\ data\ at\ either\ side\ of\ the\ connection.\ Variable\n\ arguments\ are\ used\ on\ the\ send\ methods,\ so\ you\ can\ pass\ as\ many\ parameters\ to\ them\ as\ you\ like\ and\n\ the\ corresponding\ receive\ method\ will\ wrap\ them\ up\ in\ an\ array.\n\ <br>\n\ <br>\n\ Once\ the\ connection\ is\ finished\ with,\ the\ <code>close()</code>\ method\ should\ be\ called\ to\ clear\ the\n\ connections\ and\ free\ up\ the\ ports.\n\ \n\ @author\ Michael\ Berry\n\ @version\ 12/04/2008\n
comment1.params=
comment1.target=Connection()
comment1.text=\n\ Initialises\ the\ connection\ as\ a\ server\ using\ the\ default\ port.\n
comment10.params=
comment10.target=boolean[]\ receiveBooleans()
comment10.text=\n\ Receives\ Booleans.\n\ @throws\ RuntimeException\ if\ there\ is\ a\ problem\ with\ the\ connection.\n
comment11.params=arr
comment11.target=void\ sendObjects(java.lang.Object[])
comment11.text=\n\ Sends\ Objects.\n\ @throws\ RuntimeException\ if\ there\ is\ a\ problem\ with\ the\ connection\ or\ the\ connection\ hasn't\ been\ initialised.\n
comment12.params=
comment12.target=java.lang.Object[]\ receiveObjects()
comment12.text=\n\ Receives\ Objects.\n\ @throws\ RuntimeException\ if\ there\ is\ a\ problem\ with\ the\ connection.\n
comment13.params=port
comment13.target=void\ initServer(int)
comment13.text=\n\ Initialises\ the\ server.\n
comment14.params=
comment14.target=void\ run()
comment15.params=host\ port
comment15.target=void\ initClient(java.lang.String,\ int)
comment15.text=\n\ Initialises\ the\ client.\n\ @param\ host\ The\ server\ that\ the\ client\ will\ connect\ to.\n\ @param\ port\ The\ port\ the\ client\ will\ use\ to\ connect.\n\ @throws\ RuntimeException\ if\ the\ client\ can't\ connect.\n
comment16.params=
comment16.target=boolean\ isInitialised()
comment16.text=\n\ Returns\ a\ boolean\ value\ based\ on\ whether\ this\ connection\ is\ initialised\ or\ not.\n\ @return\ True\ if\ the\ connection\ has\ been\ initialised,\ False\ otherwise.\n
comment17.params=
comment17.target=void\ close()
comment17.text=\n\ Closes\ the\ connections.\n\ @throws\ RuntimeException\ if\ the\ streams\ cannot\ be\ closed.\n
comment18.params=
comment18.target=java.lang.String\ getLocalIP()
comment18.text=\n\ Gets\ the\ local\ IP\ address.\n\ @return\ The\ IP\ address\ of\ the\ local\ machine.\ If\ the\ IP\ address\ cannot\ be\ found,\ "unknown"\ is\ returned.\n\ @see\ getRemoteIP()\n
comment19.params=
comment19.target=java.lang.String\ getRemoteIP()
comment19.text=\n\ Gets\ the\ remote\ IP\ address\ this\ computer\ is\ connected\ to.\n\ @return\ The\ remote\ IP\ address\ at\ the\ other\ end\ of\ this\ connection.\n\ @see\ getLocalIP()\n
comment2.params=host
comment2.target=Connection(java.lang.String)
comment2.text=\n\ Initialises\ the\ connection\ using\ the\ default\ port.\n\ @param\ host\ The\ host\ address\ of\ the\ server.\ If\ this\ contains\ an\ address,\ the\ program\ is\ initialised\n\ as\ a\ client\ that\ connects\ to\ the\ server\ with\ the\ address\ host.\ If\ host\ is\ blank,\ the\ program\ is\ \n\ initialised\ as\ the\ server.\n
comment20.params=
comment20.target=int\ getPort()
comment20.text=\n\ Gets\ the\ port\ being\ used\ for\ this\ connection.\n\ @return\ The\ port\ used\ for\ this\ connection.\n
comment21.params=
comment21.target=boolean\ isDefaultPort()
comment21.text=\n\ Determines\ whether\ the\ port\ being\ used\ is\ the\ default\ port.\n\ @return\ True\ if\ the\ port\ being\ used\ is\ the\ default\ port.\n
comment22.params=
comment22.target=Connection.Type\ getType()
comment22.text=\n\ Returns\ whether\ this\ computer\ is\ a\ client\ or\ a\ server.\n\ @returns\ server\ if\ the\ computer\ is\ a\ server,\ client\ if\ it's\ a\ client.\n
comment23.params=
comment23.target=java.lang.String\ toString()
comment23.text=\n\ Gives\ details\ of\ the\ connection\ in\ readable\ form.\ Details\ included\ are\ the\ machine's\ local\ IP,\ the\ remote\ IP\ the\ machine\ is\ connected\ to,\ \n\ whether\ the\ connection\ is\ a\ client\ or\ server\ and\ the\ port\ used\ for\ connections.\n\ @return\ Connection\ details.\n
comment24.params=connection
comment24.target=boolean\ equals(Connection)
comment24.text=\n\ Determines\ whether\ 2\ connections\ are\ equivalent.\ To\ be\ equivalent,\ the\ connection\ type,\ local\ IP,\ remote\ IP\ and\ port\ all\ need\ to\ match.\n\ @return\ True\ if\ the\ 2\ connections\ are\ equivalent,\ False\ otherwise.\n
comment3.params=host\ port
comment3.target=Connection(java.lang.String,\ int)
comment3.text=\n\ Initialises\ the\ connection\ with\ a\ specific\ port.\n\ @param\ host\ The\ host\ address\ of\ the\ server.\ If\ this\ contains\ an\ address,\ the\ program\ is\ initialised\n\ as\ a\ client\ that\ connects\ to\ the\ server\ with\ the\ address\ host.\ If\ host\ is\ blank,\ the\ program\ is\ \n\ initialised\ as\ the\ server.\n\ @param\ port\ The\ port\ to\ use\ with\ the\ connection.\n\ @throws\ RuntimeException\ if\ the\ connection\ has\ already\ been\ initialised.\n
comment4.params=host\ port
comment4.target=void\ init(java.lang.String,\ int)
comment4.text=\n\ Initialises\ the\ connection.\n\ @param\ host\ The\ host\ address\ of\ the\ server.\ If\ this\ contains\ an\ address,\ the\ program\ is\ initialised\n\ as\ a\ client\ that\ connects\ to\ the\ server\ with\ the\ address\ host.\ If\ host\ is\ blank,\ the\ program\ is\ \n\ initialised\ as\ the\ server.\n\ @param\ port\ The\ port\ to\ use\ with\ the\ connection.\n\ @throws\ RuntimeException\ if\ the\ connection\ has\ already\ been\ initialised.\n
comment5.params=arr
comment5.target=void\ sendStrings(java.lang.String[])
comment5.text=\n\ Sends\ Strings.\n\ @throws\ RuntimeException\ if\ there\ is\ a\ problem\ with\ the\ connection\ or\ the\ connection\ hasn't\ been\ initialised.\n
comment6.params=
comment6.target=java.lang.String[]\ receiveStrings()
comment6.text=\n\ Receives\ Strings.\n\ @throws\ RuntimeException\ if\ there\ is\ a\ problem\ with\ the\ connection.\n
comment7.params=arr
comment7.target=void\ sendInts(int[])
comment7.text=\n\ Sends\ Integers.\n\ @throws\ RuntimeException\ if\ there\ is\ a\ problem\ with\ the\ connection\ or\ the\ connection\ hasn't\ been\ initialised.\n
comment8.params=
comment8.target=int[]\ receiveInts()
comment8.text=\n\ Receives\ Integers.\n\ @throws\ RuntimeException\ if\ there\ is\ a\ problem\ with\ the\ connection.\n
comment9.params=arr
comment9.target=void\ sendBooleans(boolean[])
comment9.text=\n\ Sends\ Booleans.\n\ @throws\ RuntimeException\ if\ there\ is\ a\ problem\ with\ the\ connection\ or\ the\ connection\ hasn't\ been\ initialised.\n
numComments=25
